// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	"github.com/robdimsdale/garagepi/httphelper"
)

type FakeHTTPHelper struct {
	GetStub        func(url string) (resp *http.Response, err error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		url string
	}
	getReturns struct {
		result1 *http.Response
		result2 error
	}
	RedirectToHomepageStub        func(w http.ResponseWriter, r *http.Request)
	redirectToHomepageMutex       sync.RWMutex
	redirectToHomepageArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
}

func (fake *FakeHTTPHelper) Get(url string) (resp *http.Response, err error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		url string
	}{url})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(url)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *FakeHTTPHelper) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeHTTPHelper) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].url
}

func (fake *FakeHTTPHelper) GetReturns(result1 *http.Response, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHTTPHelper) RedirectToHomepage(w http.ResponseWriter, r *http.Request) {
	fake.redirectToHomepageMutex.Lock()
	fake.redirectToHomepageArgsForCall = append(fake.redirectToHomepageArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.redirectToHomepageMutex.Unlock()
	if fake.RedirectToHomepageStub != nil {
		fake.RedirectToHomepageStub(w, r)
	}
}

func (fake *FakeHTTPHelper) RedirectToHomepageCallCount() int {
	fake.redirectToHomepageMutex.RLock()
	defer fake.redirectToHomepageMutex.RUnlock()
	return len(fake.redirectToHomepageArgsForCall)
}

func (fake *FakeHTTPHelper) RedirectToHomepageArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.redirectToHomepageMutex.RLock()
	defer fake.redirectToHomepageMutex.RUnlock()
	return fake.redirectToHomepageArgsForCall[i].w, fake.redirectToHomepageArgsForCall[i].r
}

var _ httphelper.HTTPHelper = new(FakeHTTPHelper)
