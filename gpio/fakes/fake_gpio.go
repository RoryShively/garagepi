// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/robdimsdale/garagepi/gpio"
)

type FakeGpio struct {
	ReadStub        func(pin uint) (string, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		pin uint
	}
	readReturns struct {
		result1 string
		result2 error
	}
	WriteStub        func(pin uint, state string) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		pin   uint
		state string
	}
	writeReturns struct {
		result1 error
	}
}

func (fake *FakeGpio) Read(pin uint) (string, error) {
	fake.readMutex.Lock()
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		pin uint
	}{pin})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub(pin)
	} else {
		return fake.readReturns.result1, fake.readReturns.result2
	}
}

func (fake *FakeGpio) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeGpio) ReadArgsForCall(i int) uint {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return fake.readArgsForCall[i].pin
}

func (fake *FakeGpio) ReadReturns(result1 string, result2 error) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGpio) Write(pin uint, state string) error {
	fake.writeMutex.Lock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		pin   uint
		state string
	}{pin, state})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(pin, state)
	} else {
		return fake.writeReturns.result1
	}
}

func (fake *FakeGpio) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeGpio) WriteArgsForCall(i int) (uint, string) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].pin, fake.writeArgsForCall[i].state
}

func (fake *FakeGpio) WriteReturns(result1 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

var _ gpio.Gpio = new(FakeGpio)
